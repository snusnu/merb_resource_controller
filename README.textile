h2. merb_resource_controller

A merb plugin that provides the default @CRUD@ actions for controllers and allows for easy customization
of the generated actions. @merb_resource_controller@ only supports @datamapper@ so far. Implementing support
for @active_record@ would be trivial, but i have no need for it.

@merb_resource_controller@ will automatically recognize if it is accessed from a toplevel or a nested url, and
will "adjust" its actions accordingly. It will also initialize all the instance variables
you would expect for your chosen nesting strategy. This means for example, that when you have an URL like
@/articles/1/comments@, you will have an @@article@ variable pointing to @Article.get(1)@ and a @@comments@ variable
pointing to @Article.get(1).comments@. It will even be smart enough to give you @@article@ and @@editor@ if you have
a singleton resource nested like @/articles/1/editor@. For details on how to declare singleton resources, have a
look at the _Usage Examples_ section below.

Currently, @merb_resource_controller@ needs an extra specification inside the controller to define the nesting strategy
to use. This shouldn't really be necessary, since this information could be easily provided by the @Merb::Router@.
I'm planning to have a look into this soon! With that in place, resource_controllers could be _3 liners_ that just do
what you would expect them to do, if you don't step off the beaten track :-) Still, if you decide to do so, it will try
to get out of your way as much as possible. 

h2. More Information

Have a look at @Merb::ResourceController::Actions@, @Merb::ResourceController::Mixin::InstanceMethods@ and 
@Merb::ResourceController::Mixin::FlashSupport@ inside @lib/merb_resource_controller/actions.rb@ and 
@lib/merb_resource_controller/resource_controller.rb@ to see what methods will be available inside your controllers.

Alternatively you can continue reading this README and glance through the code listed under _Defined Actions_ 
and _Additional Helper Methods_. Almost all of the available methods are used from inside the standard actions 
that get included into your controller.

Of course, you should also have a look at the specs, to get a more concrete idea of how @merb_resource_controller@
behaves under the given circumstances.


h2. Usage Examples

<pre>
<code>
class Application < Merb::Controller
  
  # This will wrap all actions inside a dm repository block
  # in order to be able to use DM's identitiy map feature.
  # For more information on DM identity maps have a look at
  # http://datamapper.org/doku.php?id=docs:identity_map
  #
  # Feel free to include this module into single controllers 
  # instead of including it into Application controller, which
  # enables identity maps for every controller action in your app.
  
  include Merb::ResourceController::DM::IdentityMapSupport
  
  
  # This will give you the 'set_action_timeout' class method.
  
  extend Merb::ResourceController::ActionTimeout
  
  
  # If you specify an action_timeout greater or equal to 1
  # and you have the 'system_timer' gem installed, the action
  # will timeout after the given amount of seconds.
  #
  # For a more detailed explanation on the topic have a look at
  # http://adam.blog.heroku.com/past/2008/6/17/battling_wedged_mongrels_with_a/
  #
  # Feel free to set action timeouts for single controllers 
  # instead of doing so in Application controller, which sets 
  # the same action timeout for every controller action in your app.
  
  set_action_timeout 1
  
  
  # This will give you the 'controlling' class method
  
  extend Merb::ResourceController::Mixin::ClassMethods
  
end

class Articles < Application
  controlling :articles
end

class Comments < Application
  controlling :comments do |c|
    c.belongs_to :article
  end
end

class Ratings < Application
  controlling :ratings do |r|
    r.belongs_to [ :article, :comment ]
  end
end

class Editors < Application
  
  controlling(:editors, :singleton => true) do |e|
    e.belongs_to :article
  end
  
  def redirect_on_successful_create
    resource(parent, :editor)
  end
    
  def redirect_on_successful_update
    resource(parent, :editor)
  end
      
  def redirect_on_successful_destroy
    resource(parent)
  end
  
end
</code>
</pre>

h2. Defined Actions

<pre>
<code>
# The above controllers will all have the following
# actions defined. Feel free to override them, to
# customize how the controllers behave. Of course
# you are also free to override all the methods used
# by these defined actions
  
def index
  load_resource
  display requested_resource
end

def show
  load_resource
  raise Merb::ControllerExceptions::NotFound unless requested_resource
  display requested_resource
end

def new
  only_provides :html
  load_resource
  set_member(new_member)
  display member
end

def edit
  only_provides :html
  load_resource
  raise Merb::ControllerExceptions::NotFound unless requested_resource
  display requested_resource
end

def create
  load_resource
  set_member(new_member(params[member_name]))
  if member.save
    options = flash_supported? ? { :message => successful_create_messages } : {}
    redirect redirect_on_successful_create, options
  else
    message.merge!(failed_create_messages) if flash_supported?
    render :new
  end
end

def update
  load_resource
  raise Merb::ControllerExceptions::NotFound unless requested_resource
  if requested_resource.update_attributes(params[member_name])
    options = flash_supported? ? { :message => successful_update_messages } : {}
    redirect redirect_on_successful_update, options
  else
    message.merge!(failed_update_messages) if flash_supported?
    display requested_resource, :edit
  end
end

def destroy
  load_resource
  raise Merb::ControllerExceptions::NotFound unless requested_resource
  if requested_resource.destroy
    options = flash_supported? ? { :message => successful_destroy_messages } : {}
    redirect redirect_on_successful_destroy, options
  else
    raise Merb::ControllerExceptions::InternalServerError
  end
end
</code>
</pre>

h2. Additional Helper Methods

<pre>
<code>
# In addition to the actions and the methods they are using,
# you will probably want to override the redirection targets
# These are the methods you can override to this effect

def redirect_on_successful_create
  resource(*(has_parent? ? [ *parents ] + [ member ] : [ member ]))
end

def redirect_on_successful_update
  resource(*(has_parent? ? [ *parents ] + [ member ] : [ member ]))
end

def redirect_on_successful_destroy
  resource(*(has_parent? ? [ *parents ] + [ collection_name ] : [ collection_name ]))
end
</code>
</pre>

h2. TODO

# Customizable support for @provides@ and @only_provides@
# Support for user stamps (aka created_by and updated_by)
# Support for pagination once an _official_ merb pagination solution exists